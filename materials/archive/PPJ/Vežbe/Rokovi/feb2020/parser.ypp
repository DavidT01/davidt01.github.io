%{
    #include <iostream>
    #include <vector>
    #include <cstdlib>
    #include <map>

    using namespace std;

    #include "niska.hpp"

    extern int yylex();

    void yyerror(string s){
        cerr << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, Niska*> promenljive;
%}

%left '.'
%left '+' '-' 'x'
%left '*' '/'
%right UMINUS
%left '['

%union{
    string* s;
    string* str;
    int v;
    Niska* niska;
}

%start program

%token PRINT
%token<v> BROJ
%token<s> ID
%token<str> STRING

%type<niska> izraz

%%

program: program naredba ';'
    | naredba ';'
    ;
naredba: ID '=' izraz                                       {
                                                                auto it = promenljive.find(*$1);
                                                                if(it != promenljive.end()){
                                                                    yyerror("Promenljiva vec definisana");
                                                                }

                                                                promenljive[*$1] = $3;
                                                                delete $1;
                                                            }
    | PRINT '(' izraz ')'                                   { cout << *$3 << endl; delete $3; }
    ;

izraz: izraz '+' izraz                                      { $$ = *$1 + *$3; delete $1; delete $3; }
    | izraz '-' izraz                                       { $$ = *$1 - *$3; delete $1; delete $3; }
    | izraz '*' izraz                                       { $$ = *$1 * *$3; delete $1; delete $3; }
    | izraz '/' izraz                                       { $$ = *$1 / *$3; delete $1; delete $3; }
    | '(' izraz ')'                                         { $$ = $2; }
    | '-' izraz %prec UMINUS                                { $$ = -*$2; delete $2;}
    | izraz '.' izraz                                       { $$ = $1->concat(*$3); delete $1; delete $3; }
    | izraz 'x' BROJ                                        { $$ = $1->repeat($3); delete $1; }
    | izraz '[' BROJ ',' BROJ ']'                           { $$ = $1->substring($3, $5); delete $1;}
    | STRING                                                { $$ = new Niska(*$1); delete $1; }
    | BROJ                                                  {
                                                                $$ = new Niska($1);
                                                            }
    | ID                                                    {
                                                                auto it = promenljive.find(*$1);
                                                                if(it == promenljive.end()){
                                                                    yyerror("Promenljiva nije definisana");
                                                                }
                                                                
                                                                $$ = new Niska(*it->second);
                                                                delete $1;
                                                            }
    ;

%%

int main(){
    if(yyparse() == 0)
        cout << "sve ok" << endl;
    else
        cout << "sintaksna greska" << endl;

    return 0;
}