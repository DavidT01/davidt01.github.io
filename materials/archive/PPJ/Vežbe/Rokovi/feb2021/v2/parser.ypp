%{
    #include <iostream>
    #include <cstdlib>
    #include <vector>
    #include <map>

    using namespace std;

    #include "vektor.hpp"

    extern int yylex();

    void yyerror(string s){
        cerr << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, Vektor*> promenljive;
    map<string, vector<Vektor*>*> lista_promenljive;
%}

%union{
    string* s;
    double d;
    Vektor* v;
    vector<Vektor*>* vek;
}

%left '+' '-'
%left '*'
%right UMINUS
%nonassoc DEF

%start program

%token<d> BROJ
%token<s> ID LIST_ID
%token DODELA DEF PRINT SIM REFX REFY ROT ANGLE LIST

%type<vek> lista
%type<d> num
%type<v> izraz

%%

program: program naredba '\n'
    | naredba '\n'
    ;
naredba: ID DODELA izraz                                            {
                                                                        auto it = promenljive.find(*$1);
                                                                        if(it != promenljive.end()){
                                                                            delete it->second;
                                                                        }

                                                                        promenljive.insert({*$1, $3});
                                                                        delete $1; 
                                                                    }
    | PRINT '(' izraz ')'                                           { cout << *$3 << endl; }
    | LIST_ID DODELA LIST '(' lista ')'                             {
                                                                        auto it = lista_promenljive.find(*$1);
                                                                        if(it != lista_promenljive.end()){
                                                                            delete it->second;
                                                                        }

                                                                        lista_promenljive[*$1] = $5;
                                                                        delete $1; 
                                                                    }
    ;
izraz: DEF izraz                                                    { $$ = $2; } 
    | '(' '<' num ',' num '>' ',' '<' num ',' num '>' ')'           { $$ = new Vektor($3, $5, $9, $11); }
    | izraz '+' izraz                                               { $$ = *$1 + *$3; delete $1; delete $3; }
    | izraz '-' izraz                                               { $$ = *$1 - *$3; delete $1; delete $3; }
    | '-' izraz %prec UMINUS                                        { $$ = -*$2; delete $2; }
    | '(' izraz ')'                                                 { $$ = $2; }
    | num '*' izraz                                                 { $$ = *$3 * $1; delete $3; }
    | izraz '*' num                                                 { $$ = *$1 * $3; delete $1; }
    | SIM '(' izraz ')'                                             { $$ = $3->sim(); delete $3; }
    | REFX '(' izraz ')'                                            { $$ = $3->refx(); delete $3; }
    | REFY '(' izraz ')'                                            { $$ = $3->refy(); delete $3; }
    | ROT '(' izraz ',' num ')'                                     { $$ = $3->rot($5); delete $3; }
    | LIST_ID '[' BROJ ']'                                          {
                                                                        auto it = lista_promenljive.find(*$1);
                                                                        if(it == lista_promenljive.end()){
                                                                            yyerror("nepostojeca promenljiva");
                                                                        }

                                                                        if($3 >= (*it->second).size()){
                                                                            yyerror("index out of bounds");
                                                                        }

                                                                        $$ = new Vektor(*(*it->second)[$3]);
                                                                        delete $1;
                                                                    }
    | ID                                                            {
                                                                        auto it = promenljive.find(*$1);
                                                                        if(it == promenljive.end()){
                                                                            yyerror("Promenljiva nije definisana");
                                                                        }

                                                                        $$ = new Vektor(*it->second);
                                                                        delete $1;
                                                                    }
    ;
num: BROJ                                                           { $$ = $1; }
    | ANGLE '(' izraz ',' izraz ')'                                 { $$ = Vektor::angle(*$3, *$5); }
    | '|' izraz '|'                                                 { $$ = $2->norm(); delete $2; }
    ;
lista: lista ',' izraz                                              {
                                                                        $1->push_back($3);
                                                                        $$ = $1;
                                                                        delete $3;
                                                                    }
    | izraz                                                         {
                                                                        $$ = new vector<Vektor*>();
                                                                        $$->push_back($1);
                                                                        delete $1;
                                                                    }
    ;
%%

int main(){
    if(yyparse() == 0)
        cout << "sve ok" << endl;
    else
        cout << "sintaksna greksa" << endl;
    return 0;
}