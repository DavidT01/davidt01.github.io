%{
    #include <iostream>
    #include <cstdlib>
    #include <vector>
    #include <map>

    using namespace std;

    #include "vektor.hpp"

    extern int yylex();

    void yyerror(string s){
        cout << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, Vektor*> promenljive;
    map<string, vector<Vektor*>*> lists; 
%}

%union{
    double v;
    string* ime;
    Vektor* vektor;
    std::vector<Vektor*>* nizVektora;
}

%left '-' '+'
%left '*'
%right UMINUS
%nonassoc DEF_T

%token DODELA DEF_T PRINT_T REFLX_T REFLY_T SIM_T ANGLE_T ROT_T LIST_T
%token<ime> ID
%token<v> BROJ

%type<v> num
%type<vektor> izraz
%type<nizVektora> lista

%start program

%%

program: program naredba '\n'
    | naredba '\n'
    ;
naredba: ID DODELA izraz                                            {
                                                                        auto it = promenljive.find(*$1);
                                                                        if(it != promenljive.end()){
                                                                            delete(it->second);
                                                                        }

                                                                        promenljive[*$1] = new Vektor($3);
                                                                        delete $1;
                                                                        delete $3;
                                                                    }
    | PRINT_T '(' izraz ')'                                         {cout << *$3 << endl;}
    | ID DODELA LIST_T '(' lista ')'                                {lists[*$1] = $5; delete $1;}
    ;
izraz: DEF_T izraz                                                  {$$ = new Vektor($2); delete $2;}
    | '(' '<' BROJ ',' BROJ '>' ',' '<' BROJ ',' BROJ '>' ')'       {$$ = new Vektor($3, $5, $9, $11);}
    | izraz '+' izraz                                               {$$ = *$1 + *$3; delete $1; delete $3;}
    | izraz '-' izraz                                               {$$ = *$1 - *$3; delete $1; delete $3;}
    | '-' izraz %prec UMINUS                                        {$$ = $2->sim(); delete $2;}
    | num '*' izraz                                                 {$$ = *$3 * $1; delete $3;}
    | izraz '*' num                                                 {$$ = *$1 * $3; delete $1;}
    | '(' izraz ')'                                                 {$$ = $2;}
    | SIM_T '(' izraz ')'                                           {$$ = $3->sim(); delete $3;}
    | REFLX_T '(' izraz ')'                                         {$$ = $3->refx(); delete $3;}
    | REFLY_T '(' izraz ')'                                         {$$ = $3->refy(); delete $3;}
    | ROT_T '(' izraz ',' num ')'                                   {$$ = $3->rot($5); delete $3;}
    | ID '[' BROJ ']'                                               {
                                                                        auto it = lists.find(*$1);
                                                                        if(it == lists.end()){
                                                                            delete $1;
                                                                            yyerror("nepostojeca promenljiva");
                                                                        }

                                                                        if($3 >= lists[*$1]->size()){
                                                                            delete $1;
                                                                            yyerror("indeks van granica");
                                                                        }

                                                                        $$ = new Vektor(lists[*$1]->at($3));
                                                                        delete $1;
                                                                    }
    | ID                                                            {
                                                                        auto it = promenljive.find(*$1);
                                                                        if(it == promenljive.end()){
                                                                            delete $1;
                                                                            yyerror("Nepostojeca promenljiva");
                                                                        }
                                                                        
                                                                        $$ = new Vektor(promenljive[*$1]);
                                                                        delete $1;
                                                                    }
    ;
num: '|' izraz '|'                                                  {$$ = $2->norm(); delete $2;}
    | ANGLE_T '(' izraz ',' izraz ')'                               {$$ = Vektor::angle(*$3, *$5); delete $3; delete $5;}
    | BROJ                                                          {$$ = $1;}
    ;
lista: lista ',' izraz                                              { $$ = $1; $$->push_back($3);}
    | izraz                                                         {
                                                                        $$ = new vector<Vektor*>();
                                                                        $$->push_back($1);
                                                                    }
    ;
%%

int main(){
    if(yyparse() == 0){
        cout << "Sve ok" << endl;
    }else{
        cout << "Sintaksna greska" << endl;
    }
}