// probaj na kraju primere za nedef promenljive

%{
    #include <iostream>
    #include <vector>
    #include <cstdlib>
    #include <map>
    #include "vektor.hpp"

    using namespace std;

    extern int yylex();

    void yyerror(string s){
        cerr << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, Vektor*> promenljive;
%}

%union{
    double d;
    string* s;
    Vektor* v;
}

%left '+' '-'
%left '*'
%right UMINUS

%token PRINT DODELA UGAO EQV
%token<s> ID
%token<d> BROJ

%type<d> koef
%type<v> izraz listabrojeva

%start program

%%

program: program naredba ';'
    | naredba ';'
    ;
naredba: ID DODELA izraz                            {
                                                        auto it = promenljive.find(*$1);
                                                        if(it != promenljive.end()){
                                                            delete it->second;
                                                        }

                                                        promenljive[*$1] = $3;
                                                        delete $1;
                                                    }
    | PRINT '(' izraz ')'                           { cout << *$3 << endl; delete $3; }
    | izraz '.' izraz                               {
                                                        Vektor* noviVek = new Vektor();
                                                        double rez = noviVek->skalarniProizvod(*$1, *$3);
                                                        cout << rez << endl;

                                                        delete $1; delete $3; delete noviVek;
                                                    }
    | '|' izraz '|'                                 {
                                                        Vektor* noviVek = new Vektor();
                                                        double rez = noviVek->norma(*$2);
                                                        cout << rez << endl;

                                                        delete $2; delete noviVek;
                                                    }
    | UGAO '(' izraz ',' izraz ')'                  {
                                                        Vektor* noviVek = new Vektor();
                                                        double rez = noviVek->ugao(*$3, *$5);
                                                        cout << rez << endl;

                                                        delete $3; delete $5; delete noviVek;
                                                    }
    | EQV '(' izraz ',' izraz ')'                   {
                                                        Vektor* noviVek = new Vektor();
                                                        if(noviVek->ekvivalencija(*$3, *$5))
                                                            cout << "True" << endl;
                                                        else
                                                            cout << "False" << endl;
                                                        
                                                        delete $3; delete $5; delete noviVek;
                                                    }
    ;
izraz:  '<' listabrojeva '>'                        { $$ = $2; }
    | ID                                            {
                                                        auto it = promenljive.find(*$1);
                                                        if(it == promenljive.end()){
                                                            yyerror("Promenljiva nije definisana");
                                                        }

                                                        $$ = new Vektor(*it->second);
                                                        delete $1;
                                                    }
    | izraz '+' izraz                               { $$ = *$1 + *$3; delete $1; delete $3;  }
    | izraz '-' izraz                               { $$ = *$1 - *$3; delete $1; delete $3; }
    | '(' izraz ')'                                 { $$ = $2; }
    | koef '*' izraz                                { $$ = *$3 * $1; delete $3; }
    ;
listabrojeva: listabrojeva ',' koef                 { $1->dodajKoef($3); $$ = $1; }
    | koef                                          { $$ = new Vektor(); $$->dodajKoef($1); }
    ;
koef: BROJ                                          { $$ = $1; }
    | '-' BROJ %prec UMINUS                         { $$ = -$2; }
    ;
%%

int main(){
    if(yyparse() == 0)
        cout << "Sve ok" << endl;
    else
        cout << "Sintaksna greska" << endl;

    return 0;
}