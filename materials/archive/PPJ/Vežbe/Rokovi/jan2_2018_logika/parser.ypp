%{
    #include <iostream>
    #include <vector>
    #include <cstdlib>
    #include <map>

    using namespace std;

    #include "logika.hpp"

    extern int yylex();
    
    void yyerror(string s){
        cerr << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, vector<Logika*>*> promenljive;
%}

%union{
    string* s;
    int val;
    vector<Logika*>* logika_lista;
    Logika* logika;
}

%left IMPL
%left EKV
%left DISJ
%left CONJ
%right '!'
%left '['

%start program

%token DODELA CONJ DISJ IMPL EKV TRUE FALSE UNDEF HEAD TAIL
%token<s> ID LIST_ID
%token<val> BROJ

%type<logika_lista> lista lista_izraza
%type<logika> value izraz

%%

program: program naredba '\n'
    | naredba '\n'
    ;
naredba: izraz                                  { cout << *$1 << endl; }
    | ID DODELA izraz                           {
                                                    auto it = promenljive.find(*$1);
                                                    if(it != promenljive.end()){
                                                        it->second->clear();
                                                        it->second->push_back($3);
                                                    }else{
                                                        vector<Logika*>* vec = new vector<Logika*>();
                                                        vec->push_back($3);

                                                        promenljive.insert({*$1, vec});
                                                    }

                                                    delete $1;
                                                }
    | LIST_ID DODELA '[' lista ']'              {}
    ;
izraz: izraz CONJ izraz                         { $$ = *$1 + *$3; delete $1; delete $3; }
    | izraz DISJ izraz                          { $$ = *$1 - *$3; delete $1; delete $3; }
    | izraz IMPL izraz                          {}
    | izraz EKV izraz                           {}
    | '!' izraz                                 { $$ = !(*$2); }
    | '(' izraz ')'                             { $$ = $2; }
    | value                                     { $$ = $1; }
    | ID                                        {
                                                    auto it = promenljive.find(*$1);
                                                    if(it == promenljive.end()){
                                                        vector<Logika*>* vec = new vector<Logika*>();
                                                        vec->push_back(new Logika(2));

                                                        promenljive.insert({*$1, vec});
                                                    }

                                                    it = promenljive.find(*$1);
                                                    $$ = (*it->second)[0];
                                                    delete $1;
                                                }
    | LIST_ID '[' BROJ ']'                      {}
    | HEAD '(' lista_izraza ')'                 {}
    | LIST_ID                                   {}
    ;
value: TRUE                                     { $$ = new Logika(1); }
    | FALSE                                     { $$ = new Logika(0); }
    | UNDEF                                     { $$ = new Logika(2); }
    ;
lista: lista ',' izraz                          {}
    | izraz                                     {}
    ;
lista_izraza: TAIL '(' lista_izraza ')'         {}
    | LIST_ID                                   {}
    ;    

%%

int main(){
    if(yyparse() == 0)
        cout << "sve ok" << endl;
    else
        cout << "sintaksna greska" << endl;

    return 0;
}