%{
    #include <iostream>
    #include <vector>
    #include <cstdlib>
    #include <map>

    using namespace std;

    #include "logika.hpp"

    extern int yylex();

    void yyerror(string s){
        cerr << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, Logika*> promenljive;
%}

%left IMPL
%left EQ
%left DISJ
%left CONJ
%right '!'
%left '['

%union{
    string* s;
    int val;
    Logika* l;
}

%start program

%token DODELA CONJ DISJ IMPL EQ TRUE FALSE UNDEF HEAD TAIL
%token<s> ID LIST_ID
%token<val> BROJ

%type<l> lista_izraz lista izraz

%%

program: program naredba '\n'
    | naredba '\n'
    ;
naredba: izraz                                  { cout << *$1 << endl; delete $1; }
    | ID DODELA izraz                           {
                                                    auto it = promenljive.find(*$1);
                                                    if(it != promenljive.end()){
                                                        delete it->second;
                                                    }

                                                    promenljive[*$1] = $3;
                                                    delete $1;
                                                }
    | LIST_ID DODELA lista_izraz                {
                                                    auto it = promenljive.find(*$1);
                                                    if(it != promenljive.end()){
                                                        yyerror("Lista vec postoji");
                                                    }

                                                    promenljive[*$1] = $3;
                                                    delete $1;
                                                }
    ;
izraz: izraz CONJ izraz                         { $$ = *$1 + *$3; }
    | izraz DISJ izraz                          { $$ = *$1 - *$3; }
    | izraz IMPL izraz                          {}
    | izraz EQ izraz                            { $$ = *$1 == *$3; }
    | '!' izraz                                 { $$ = !*$2; delete $2; }
    | '(' izraz ')'                             { $$ = $2; }
    | TRUE                                      { $$ = new Logika(1); }
    | FALSE                                     { $$ = new Logika(0); }
    | UNDEF                                     { $$ = new Logika(2); }
    | ID                                        {
                                                    auto it = promenljive.find(*$1);
                                                    if(it == promenljive.end()){
                                                        Logika* log = new Logika(2);
                                                        promenljive[*$1] = log;
                                                    }

                                                    it = promenljive.find(*$1);
                                                    $$ = new Logika(*it->second);
                                                    delete $1;
                                                }
    | HEAD '(' lista_izraz ')'                  {
                                                    $$ = new Logika((*$3)[0]);  
                                                }
    | LIST_ID '[' BROJ ']'                      {
                                                    auto it = promenljive.find(*$1);
                                                    if(it == promenljive.end()){
                                                        yyerror("Lista nije definisana");
                                                    }

                                                    $$ = new Logika((*it->second)[$3]);
                                                    delete $1;
                                                }
    ;
lista_izraz: LIST_ID                            {
                                                    auto it = promenljive.find(*$1);
                                                    if(it == promenljive.end()){
                                                        yyerror("Lista nije definisana");
                                                    }

                                                    $$ = new Logika(*it->second); delete $1;
                                                }
    | TAIL '(' lista_izraz ')'                  {
                                                    $$ = new Logika();
                                                    for(int i=1; i<$3->size(); i++){
                                                        $$->dodaj_vrednost((*$3)[i]);
                                                    }

                                                    delete $3;
                                                    
                                                }
    | '[' lista ']'                             { $$ = $2; }
    ;
lista: lista ',' izraz                          {
                                                    $1->dodaj_vrednost((*$3)[0]);
                                                    $$ = $1;
                                                    delete $3;
                                                }
    | izraz                                     { 
                                                    $$ = new Logika((*$1)[0]); delete $1;
                                                }
    ;

%%

int main(){
    if(yyparse() == 0)
        cout << "sve ok" << endl;
    else
        cout << "sintaksna greska" << endl;

    return 0;
}