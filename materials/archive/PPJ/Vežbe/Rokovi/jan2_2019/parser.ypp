%{
    #include <iostream>
    #include <cstdlib>
    #include <string>
    #include "razlomak.hpp"
    #include <map>

    using namespace std;

    extern int yylex();

    void yyerror(string s){
        cout << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, Razlomak*> promenljive;

%}

%union{
    int v;
    string* ime;
    Razlomak* r;
}

%left '-' '+'
%left '*' '/'

%token PRINT_T DEN_T NOM_T DOUBLE_T EQUALS_T
%token<ime> ID
%token<v> BROJ

%type<r> izraz naredba

%start program

%%

program: program naredba '\n'                   {}
    | naredba '\n'                              {}
    ;
naredba: PRINT_T '(' izraz ')'                  { cout << *$3 << endl; }
    | NOM_T '(' izraz ')'                       { cout << $3->getBrojilac() << endl; }
    | DEN_T '(' izraz ')'                       { cout << $3->getImenilac() << endl; }
    | DOUBLE_T '(' izraz ')'                    {
                                                    printf("%.5f\n", (float)$3->getBrojilac() / $3->getImenilac());
                                                }
    | EQUALS_T '(' izraz ',' izraz ')'          {
                                                    if($3->getBrojilac() == $5->getBrojilac() && $3->getImenilac() == $5->getImenilac())
                                                        cout << "True" << endl;
                                                    else
                                                        cout << "False" << endl;
                                                }
    | ID '=' izraz                              {
                                                    auto it = promenljive.find(*$1);
                                                    if(it != promenljive.end()){
                                                        delete it->second;
                                                    }
                                                    promenljive[*$1] = $3;
                                                    delete $1;
                                                }
    | izraz                                     {}
    ;
izraz: '[' BROJ ']'                             { $$ = new Razlomak($2, 1); }
    | '[' BROJ ',' BROJ ']'                     { $$ = new Razlomak($2, $4); }
    | '(' izraz ')'                             { $$ = $2; }
    | izraz '+' izraz                           { $$ = *$1 + *$3; delete $1; delete $3; }
    | izraz '-' izraz                           { $$ = *$1 - *$3; delete $1; delete $3; }
    | izraz '*' izraz                           { $$ = *$1 * *$3; delete $1; delete $3; }
    | izraz '/' izraz                           { $$ = *$1 / *$3; delete $1; delete $3; }
    | ID                                        {
                                                    auto it = promenljive.find(*$1);
                                                    if(it == promenljive.end()){
                                                        yyerror("Promenljiva nije definisana");
                                                    }

                                                    $$ = new Razlomak(*it->second);
                                                    delete $1;
                                                }
    ;
%%

int main(){
    if(yyparse() == 0){
        cout << "Sve ok" << endl;
    }else cout << "Sintaksna greska" << endl;
}