%{

#include <iostream>
#include <cstdlib>
#include <map>

#include "broj.hpp"

using namespace std;

extern int yylex();

void yyerror(string s) {
	cerr << "Sintaksna greska: " << s << endl;
	exit(EXIT_FAILURE);
}

map<string, Broj*> promenljive;

void deinicijalizuj() {
	for(auto it = promenljive.begin(); it != promenljive.end(); it++)
		delete it->second;
}

%}

%union {
	int v;
	string* ime;
	Broj* broj;
	bool b;
}

%left EQ NEQ
%left '|'
%left '^'
%left '&'
%left SL_T SR_T
%left '+' '-'
%left '*' '/' '%'
%right '~'
%right UMINUS

%token INT_T PRINT_T SL_T SR_T EQ_T NEQ_T LIST_T
%token<v> BROJ
%token<ime> ID

%type<broj> izraz lista elementi
%type<b> logicka_naredba

%start program

%%

program: naredba '\n' program
	| naredba '\n'
	;
naredba: INT_T ID							{ auto it = promenljive.find(*$2);
											  if(it != promenljive.end())
													yyerror("Promenljiva je vec definisana");
											  promenljive[*$2] = new Broj(0);
											  delete $2; }
	| INT_T ID '=' izraz					{ auto it = promenljive.find(*$2);
											  if(it != promenljive.end())
													yyerror("Promenljiva je vec definisana");
											  promenljive[*$2] = new Broj((*$4)[0]);
											  delete $2; delete $4; }
	| ID '=' izraz							{ auto it = promenljive.find(*$1);
											  if(it == promenljive.end())
													yyerror("Promenljiva nije definisana");
											  delete it->second;
											  promenljive[*$1] = $3;
											  delete $1; }
	| PRINT_T '(' izraz ')'					{ cout << (*$3) << endl; delete $3; }
	| PRINT_T '(' izraz ',' BROJ ')'		{ $3->show($5); delete $3; }
	| logicka_naredba						{ cout << ($1 ? "True" : "False") << endl; }
	| LIST_T ID '=' lista					{ auto it = promenljive.find(*$2);
											  if(it != promenljive.end())
													yyerror("Promenljiva je vec definisana");
											  promenljive[*$2] = $4;
											  delete $2; }
	;
logicka_naredba: izraz EQ izraz				{ $$ = *$1 == *$3; delete $1; delete $3; }
	| izraz NEQ izraz						{ $$ = *$1 != *$3; delete $1; delete $3; }
	;
izraz: izraz '+' izraz						{ $$ = *$1 + *$3; delete $1; delete $3; }
	| izraz '-' izraz						{ $$ = *$1 - *$3; delete $1; delete $3; }
	| izraz '*' izraz						{ $$ = *$1 * *$3; delete $1; delete $3; }
	| izraz '/' izraz						{ $$ = *$1 / *$3; delete $1; delete $3; }
	| izraz '%' izraz						{ $$ = *$1 % *$3; delete $1; delete $3; }
	| '-' izraz %prec UMINUS				{ $$ = -(*$2); delete $2; }
	| izraz '&' izraz						{ $$ = *$1 & *$3; delete $1; delete $3; }
	| izraz '|' izraz						{ $$ = *$1 | *$3; delete $1; delete $3; }
	| izraz '^' izraz						{ $$ = *$1 ^ *$3; delete $1; delete $3; }
	| izraz SL_T izraz						{ $$ = *$1 << *$3; delete $1; delete $3; }
	| izraz SR_T izraz						{ $$ = *$1 >> *$3; delete $1; delete $3; }
	| '~' izraz								{ $$ = ~(*$2); delete $2; }
	| '(' izraz ')'							{ $$ =  $2; }
	| ID									{ auto it = promenljive.find(*$1);
											  if(it == promenljive.end())
													yyerror("Promenljiva nije definisana");
											  $$ = new Broj(*it->second);
											  delete $1; }
	| BROJ									{ $$ = new Broj($1); }
	| ID '[' BROJ ']'						{ auto it = promenljive.find(*$1);
											  if(it == promenljive.end())
													yyerror("Promenljiva nije definisana");
											  if($3 >= (it->second)->get_size())
													yyerror("Indeks van opsega");
											  $$ = new Broj((*(it->second))[$3]);
											  delete $1; }
	;
lista: '[' elementi ']'						{ $$ = $2; }
	;
elementi: elementi ',' izraz              	{ $1->push_back((*$3)[0]);
											  $$ = $1;
											  delete $3; }
	| izraz                               	{ $$ = new Broj((*$1)[0]);
											  delete $1; }
	;

%%

int main() {
	if(yyparse() == 0)
		cout << "Sve ok" << endl;
	else
		cout << "Sintaksna greska" << endl;
	deinicijalizuj();
	exit(EXIT_SUCCESS);
}
