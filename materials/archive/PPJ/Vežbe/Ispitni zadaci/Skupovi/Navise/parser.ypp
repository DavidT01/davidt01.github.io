%{

#include <iostream>
#include <map>
#include <cstdlib>

using namespace std;

#include "skup.hpp"

extern int yylex();

void yyerror(string s) {
    cerr << "Sintaksna greska: " << s << endl;
    exit(EXIT_FAILURE);
}

map<string, Skup*> promenljive;
Skup* UniversalSet = NULL;

void deinicijalizuj() {
    for(auto it = promenljive.begin(); it != promenljive.end(); it++)
        delete it->second;
}

%}

%union {
    Skup* s;
    bool b;
    string* ime;
    int x;
}

%left UNI
%left PRES RAZ
%right '~'

%token PRINT_T UNI PRES RAZ TT CHECK_T CARD_T USET_T
%token<ime> ID
%token<x> BROJ

%type<s> izraz lista skup

%start program

%%

program: naredba ';' program
    |
    ;
naredba: ID '=' izraz                   {   auto it = promenljive.find(*$1);
                                            if(it != promenljive.end())
                                                delete it->second;
                                            promenljive[*$1] = $3;
                                            delete $1; }
    | PRINT_T izraz                     {   cout << *$2 << endl;
                                            delete $2; }
    | CHECK_T BROJ ':' izraz            {   if($4->find($2))
                                                cout << "True" << endl;
                                            else
                                                cout << "False" << endl;
                                            delete $4;}
    | CHECK_T izraz '<' izraz           {   if($4->subset(*$2))
                                                cout << "True" << endl;
                                            else
                                                cout << "False" << endl;
                                            delete $2;
                                            delete $4;}
    | CARD_T izraz                      {   cout << $2->card() << endl;
                                            delete $2; }
    | USET_T '=' izraz                  {   if(UniversalSet != NULL)
                                                delete UniversalSet;
                                            UniversalSet = $3; }
    ;
izraz: izraz UNI izraz                  {   $$ = *$1 + *$3;
                                            delete $1;
                                            delete $3; }
    | izraz PRES izraz                  {   $$ = *$1 * *$3;
                                            delete $1;
                                            delete $3; }
    | izraz RAZ izraz                   {   $$ = *$1 - *$3;
                                            delete $1;
                                            delete $3; }
    | '~' izraz                         {   if(UniversalSet == NULL)
                                                yyerror("Domen nije definisan");
                                            $$ = UniversalSet->komplement(*$2);
                                            delete $2; }
    | '(' izraz ')'                     {   $$ = $2; }
    | skup                              {   $$ = $1; }
    | ID                                {   auto it = promenljive.find(*$1);
                                            if(it == promenljive.end())
                                                yyerror("Promenljiva nije definisana");
                                            $$ = new Skup(*(it->second)); }
    ;
skup: '{' lista '}'                     {   $$ = $2; }
    | BROJ TT BROJ                      {   $$ = new Skup($1, $3); }
lista: lista ',' BROJ                   {   $1->insert($3);
                                            $$ = $1; }
    | BROJ                              {   $$ = new Skup();
                                            $$->insert($1); }
    ;

%%

int main() {
    if(yyparse() == 0)
        cout << "Sve ok" << endl;
    else
        cout << "Sintaksna greska" << endl;
        deinicijalizuj();
    exit(EXIT_SUCCESS);
}