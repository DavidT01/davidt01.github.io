%{
    #include <iostream>
    #include <vector>
    #include <cstdlib>
    #include <map>
    #include <tuple>

    using namespace std;

    #include "ugao.hpp"

    extern int yylex();

    void yyerror(string s){
        cerr << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, Ugao*> promenljive;
%}

%union{
    int v;
    string* s;
    Ugao* u;
}

%left '+' '-'
%left '*'
%right UMINUS

%start program

%token PRINT KOM SUP
%token<s> ID LIST_ID
%token<v> BROJ

%type<u> izraz ugao lista


%%

program: program naredba ';'
    | naredba ';'
    ;
naredba: ID '=' izraz                               {
                                                        auto it = promenljive.find(*$1);
                                                        if(it != promenljive.end()){
                                                            delete it->second;
                                                        }

                                                        promenljive[*$1] = $3;
                                                        delete $1;
                                                    }
    | LIST_ID '=' '[' lista ']'                     {
                                                        auto it = promenljive.find(*$1);
                                                        if(it != promenljive.end()){
                                                            yyerror("Lista vec postoji");
                                                        }

                                                        promenljive[*$1] = $4;
                                                        delete $1;
                                                    }
    | PRINT '(' izraz ')'                           { cout << *$3 << endl; delete $3; }
    | izraz                                         { }
    ;
izraz: ugao                                         { $$ = $1; }
    | izraz '+' izraz                               { $$ = *$1 + *$3; delete $1; delete $3; }
    | izraz '-' izraz                               { $$ = *$1 - *$3; delete $1; delete $3;}
    | BROJ '*' izraz                                { $$ = *$3 * $1; delete $3; }
    | izraz '*' BROJ                                { $$ = *$1 * $3; delete $1; }
    | '(' izraz ')'                                 { $$ = $2; }
    | KOM '(' izraz ')'                             { $$ = $3->kom(); delete $3; }
    | SUP '(' izraz ')'                             { $$ = $3->sup(); delete $3; }
    | ID                                            {
                                                        auto it = promenljive.find(*$1);
                                                        if(it == promenljive.end()){
                                                            yyerror("Promenljiva nije definisana");
                                                        }

                                                        $$ = new Ugao(*it->second);
                                                        delete $1; 
                                                    }
    | LIST_ID '[' BROJ ']'                          {
                                                        auto it = promenljive.find(*$1);
                                                        if(it == promenljive.end()){
                                                            yyerror("Lista ne popstoji");
                                                        }

                                                        if($3 >= it->second->size())
                                                            yyerror("Index out of bounds");

                                                        int st = it->second->getStepene2($3);
                                                        int min = it->second->getMinute2($3);
                                                        int sek = it->second->getSekunde2($3);

                                                        $$ = new Ugao(st, min, sek);
                                                        delete $1;
                                                    }
    | LIST_ID                                       {
                                                        auto it = promenljive.find(*$1);
                                                        if(it == promenljive.end()){
                                                            yyerror("Lista ne postoji");
                                                        }

                                                        $$ = new Ugao(*it->second);
                                                        delete $1; 
                                                    }
    ;
ugao: '<' BROJ ',' BROJ ',' BROJ '>'                { $$ = new Ugao($2, $4, $6); }
    ;
lista: lista ',' izraz                              {
                                                        int st = $3->getStepene();
                                                        int min = $3->getMinute();
                                                        int sek = $3->getSekunde();
                                                        $1->dodajUgao(st, min, sek);
                                                        $$ = $1;
                                                        delete $3;
                                                    }
    | izraz                                         {
                                                        int st = $1->getStepene();
                                                        int min = $1->getMinute();
                                                        int sek = $1->getSekunde();
                                                        $$ = new Ugao(st, min, sek);
                                                        delete $1; 

                                                    }
    ;
%%

int main(){
    if(yyparse() == 0)
        cout << "Sve ok" << endl;
    else
        cout << "sintaksna greska" << endl;

    return 0;
}
