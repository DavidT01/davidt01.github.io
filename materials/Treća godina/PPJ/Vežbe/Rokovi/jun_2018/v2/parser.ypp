%{
    #include <iostream>
    #include <vector>
    #include <map>

    using namespace std;

    #include "matrice.hpp"

    extern int yylex();

    void yyerror(string s){
        cerr << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, Matrica*> promenljive;
%}

%union{
    int v;
    string* s;
    Matrica* m;
    vector<int>* vek;
}

%left PPLUS
%left PMUL
%left '*'
%left '\''

%start program

%token DISP SIZE PPLUS PMUL
%token<s> ID
%token<v> BROJ

%type<m> izraz nizvrsta
%type<vek> nizbrojeva vrsta

%%

program: program naredba '\n'
    | naredba '\n'
    ;
naredba: ID '=' izraz                                   {
                                                            auto it = promenljive.find(*$1);
                                                            if(it != promenljive.end())
                                                                delete it->second;

                                                            promenljive[*$1] = $3;
                                                            delete $1;
                                                        }
    | DISP '(' izraz ')'                                { cout << *$3 << endl; delete $3; }
    | SIZE '(' izraz ')'                                { $3->size(); delete $3; }
    ;
izraz: '[' nizvrsta ']'                                 { $$ = $2; }
    | '(' izraz ')'                                     { $$ = $2; }
    | izraz PPLUS izraz                                 { $$ = *$1 + *$3; delete $1; delete $3;}
    | izraz PMUL izraz                                  { $$ = *$1 % *$3; delete $1; delete $3; }
    | izraz '\''                                        { $$ = $1->transponovanje(); }
    | izraz '*' izraz                                   { $$ = *$1 * *$3; delete $1; delete $3; }
    | ID                                                {
                                                            auto it = promenljive.find(*$1);
                                                            if(it == promenljive.end()){
                                                                yyerror("Promenljiva nije definisana");
                                                            }

                                                            $$ = new Matrica(*it->second);
                                                            delete $1;
                                                        }
    ;
nizvrsta: nizvrsta ';' vrsta                            { $1->dodaj_vrstu(*$3); $$ = $1; }
    | vrsta                                             { $$ = new Matrica(); $$->dodaj_vrstu(*$1); }
    ;
vrsta: '[' nizbrojeva ']'                               { $$ = $2; }
    ;
nizbrojeva: nizbrojeva ',' BROJ                         { $1->push_back($3); $$ = $1; }
    | BROJ                                              { $$ = new vector<int>(); $$->push_back($1); }
    ;

%%

int main(){
    if(yyparse() == 0)
        cout << "Sve ok" << endl;
    else
        cout << "sintaksna greska" << endl;
    return 0;
}