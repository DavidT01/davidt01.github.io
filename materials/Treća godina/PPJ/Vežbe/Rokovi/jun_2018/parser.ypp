%{
    #include <iostream>
    #include <vector>
    #include <map>
    #include <cstdlib>
    #include <string>

    using namespace std;
    #include "matrice.hpp"

    extern int yylex();

    void yyerror(string s){
        cerr << "Sintaksna greska: " << s << endl;
        exit(EXIT_FAILURE);
    }

    map<string, Matrica*> promenljive;
%}

%union{
    int v;
    string* s;
    Matrica* m;
    vector<int>* vek;
}

%left PLUS
%left MUL '*'
%left '\''

%token DISP SIZE MUL PLUS
%token<v> BROJ
%token<s> ID

%type<vek> nizbrojeva vrsta
%type<m> nizvrsta izraz

%start program

%%

program: program naredba '\n'
    | naredba '\n'
    ;
naredba: ID '=' izraz                           {
                                                    auto it = promenljive.find(*$1);
                                                    if(it != promenljive.end())
                                                        delete it->second;

                                                    promenljive[*$1] = $3;
                                                    delete $1;
                                                }
    | DISP '(' izraz ')'                        { cout << *$3 << endl; }
    | SIZE '(' izraz ')'                        { $3->size(); }
    ;
izraz: '[' nizvrsta ']'                         { $$ = $2; }
    | ID                                        {
                                                    auto it = promenljive.find(*$1);
                                                    if(it == promenljive.end())
                                                        cout << "Dimenzije se ne poklapaju" << endl;
                                                    else
                                                        $$ = promenljive[*$1];
                                                }
    | izraz PLUS izraz                          { $$ = *$1 + *$3; } // kada sam imao delete $1 $3 dobijam segfault zasto?
    | izraz MUL izraz                           { $$ = *$1 % *$3; }
    | izraz '*' izraz                           { $$ = *$1 * *$3; }
    | izraz '\''                                { $$ = $1->transp(); }
    ;
nizvrsta: nizvrsta ';' vrsta                    { $1->dodaj_vrstu(*$3); $$ = $1; delete $3;}
    | vrsta                                     {
                                                    $$ = new Matrica();
                                                    $$->dodaj_vrstu(*$1);
                                                    delete $1;
                                                }
    ;
vrsta: '[' nizbrojeva ']'                       { $$ = $2; }
    ;
nizbrojeva: nizbrojeva ',' BROJ                 { $1->push_back($3); $$ = $1; }
    | BROJ                                      {
                                                    $$ = new vector<int>();
                                                    $$->push_back($1);
                                                }
    ;

%%

int main(){
    if(yyparse() == 0)
        cout << "Sve ok" << endl;
    else
        cout << "Sintaksna greska" << endl;
    
    return 0;
}